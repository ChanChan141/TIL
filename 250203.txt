절차 지향 프로그래밍 find()
순차적으로 흐르는 형태
함수 호출의 흐름이 중요
ex)요리 레시피

한계점
- 복잡성 증가
- 유지보수 문제

객체 지향 프로그래밍 - '데이터가 살아나다' (person.find())
데이터와 메서드의 결합.
프로그램을 데이터와 그 데이터를 처리하는 함수를 하나의 단위로 묶어서 조직적으로 관리
객체 간 상호작용과 메시지 전달이 중요

객체 지향은 수동적인 데이터가 능동적인 객체로 변화한 것
코드의 구조화와 재사용성을 높이는 동시에, 실제 세계의 모델링 방식과 더 유사한 프로그래밍을 가능하게 함. 능동적 처리가 가능


객체 지향은 절차지향을 기반으로 두고 보완하기 위해 객체라는 개념을 도입함
상속, 코드 재사용성, 유지보수성 드으이 이점을 가지는 패러다임.

객체: 속성과 동작을 가짐
속성, 메서드, 고유성



클래스:
객체를 만들기 위한 설계도
클래스로부터 여러 개의 객체를 쉽게 찍어낼 수 있음

객체와 클래스
클래스(가수)
객체(아이유, BTS)

클래스
데이터와 기능을 하나의 틀로 묶어 관리하는 방법
사용자 정의 객체를 만드는 수단

클래스 정의
파스칼 케이스(단어마다 대문자로 시작 ex)MyClass)

__init__메서드는 생성자 메서드로 불림
자동으로 만들어짐.

인스턴스 
클래스가 설계도면 인스턴스는 실데로 만든 개별물건

p1 = person('alice',25)
p1.troduce()

str은 하나의 클래스임
인스턴스.매서드

인스턴스 변수(속성)
공통적인 속성임

메서드
클래스 내부에 정의된 함수.

인스턴스 메서드 구조
반드시 첫번째 인자로 self를 받는데 다른 이름을 쓰지 않음(할순있음)

단축형 호출: 객체 지향 방시그이 메서드로 호출하는 표현
'hello'.upper() = str.upper('hello')


인스턴스 메서드
인스턴스의 상태를 변경하거나, 해당 인스턴스의 특정 동작을 수행

클래스 메서드
인서튼서의 상탱 의존하지 않는 기능을 저으이
클래스 변수를 조작하거나 클래스 레벨의 동작을 수행

스태틱 메서드
클래스 및 인스턴스와 관련이 없는 일반적인 기능을 수행

*인스턴스는 인스턴스 메서드만 사용하도록 한다.*

OOP패러다임에 따라 명확한 목적에 따라 설계된 것이기 때문에 클래스와 인스턴스 각각 올바른 메서드만 사용해야함.

매직메서드 
내장함수 print에 의해 호출되어 객체 출력을 문자열 표현으로 변경

데코레이터

객관식 20개
단답형 10개
서술형 2개
